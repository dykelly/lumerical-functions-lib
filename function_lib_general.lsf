#############################################################################
# Function library for both DEVICE and FDE
# Author: Daniel Kelly

#Use ?getcommands to get all commands (not all are documented in Lumerical)
#############################################################################

function getdtype(varname) {
    ## gets datatype of a variable. Because apparently there's no need for an in-built function
    ## which does that... Thanks, Lumerical
    ## Incomplete function as no idea how well some of these checks work. Also need to expand to other dtypes
    # Tries out various conversions on input variable, then catches if an error occurs, and 
    # hence tries to infer if that is the date type.

    if (isnull(varname)) {return "null";} # not sure on this line - if it's needed

    if (isstruct(varname)) {return "struct";}
    
    if (iscell(varname)) {return "cell";}
    
    try {?getparameter(varname);} catch(notdataset);
    #?notdataset;
    if (notdataset=="") {
        try {vectorplot(varname);} catch(notrectilineardataset);
        if (notrectilineardataset=="") {return "rectilinear dataset";}
        else {return "dataset";}
        }
    
    try {varname + "a";} catch(notstring);
    if (notstring=="") {return "str";}
    
    try {num2str(varname);} catch(notnumber);
    if (notnumber=="") {return "number";}
    
    try {size(varname);} catch(notmatrix);
    if (notmatrix=="") {return "matrix";}
    
    return "unknown"; 
}

function solver2struct(solver_name) {
 # Creates a struct of data contained in a solver. Maybe I just can't figure it out
 # but it seems like there's no way of actually getting all the datasets from a solver at once, 
 # rather than individual datasets one-by-one.
    result_struct = struct;
    for (dset=splitstring(getresult(solver_name), endl)) {
        result_struct = setfield(result_struct, dset, getresult(solver_name, dset));
    }
    return result_struct;
}

function num2strcell(matrix_in) {
    #converts a matrix to a string cell
    out = cell(length(matrix_in));
    for (i=1:length(matrix_in)) {
        out{i} = num2str(matrix_in(i));
    }
    return out;
}

function printcell(cell_name) {
    #print cell contents
    for (cell_el=cell_name) {
        ?cell_el;   
    }   
}
function printstruct(struct_name) {
    #print cell contents
    for (struct_el=splitstring(getfield(struct_name), endl)) {
        ?struct_el + ": ";
        ?getfield(struct_name, struct_el);
    }   
}

function print2(cell_or_struct) {
    # prints cell or struct contents
    input_type = getdtype(cell_or_struct);
     if (input_type=='cell') {
         printcell(cell_or_struct);
     }
     else if (input_type=='struct') {
         printstruct(cell_or_struct);
     }
     else {?"Input is not a cell or struct";}
}

function joinstr(array_in, delimiter) {
    # joins a cell/matrix of elements, separated by a delimiter. 
    # If elements are numbers, converts them to strings. 
    out = "";
    N = length(array_in);
    if (getdtype(array_in)=='str') {return array_in;} # otherwise would loop over string
    for (i = 1:N) {
        if (isnull(array_in)) {?"Input array is null";}
        if (i < N) {delim = delimiter;} else {delim = '';} # set the delimiter so it doesn't apply to last element
        if (iscell(array_in)) {el = array_in{i};}
        else {el = array_in(i);}
        # converts to string if input is a number  
        if (getdtype(el)=="number") {el = num2str(el);}
        out = out + el + delim;
    }
    return out;
}

function csvappend(fname, data) {
    #?joinstr(data, ', ');
    write(fname, joinstr(data, ', '));
}


function argmax(array_in) {
    # find index of the largest value of a matrix
    maxVal = max(array_in);
    indexMax = find(array_in == maxVal);
    
    return indexMax(1);   
}

function remove_row(array_in, row_n) {
    # removes row in a 2d or 1d matrix array
    n_rows = size(array_in,1);
    # 2D case
    #if (size(array_in,1)==2){
        if (row_n==1) {return array_in(2:n_rows,:);}    
        if (row_n==n_rows) {return array_in(1:n_rows-1,:);}    
        else {return [array_in(1:row_n-1, : ); array_in(row_n+1:n_rows, : )];}
    #}
    ## 1D case
    #if (size(array_in,2)==1){
        #if (row_n==1) {return array_in(2:n_rows);}    
        #if (row_n==n_rows) {return array_in(1:n_rows-1);}    
        #else {return [array_in(1:row_n-1); array_in(row_n+1:n_rows)];}
    #}
}

function remove_col(array_in, col_n) {
    # removes column in a 2d matrix array
    n_cols = size(array_in,2);
    if (col_n==1) {
        if (n_cols != 1) {return array_in( : ,2:n_cols);}
        else {return matrix(1,1);} # cover the empty case too 
    }   
    if (col_n==n_cols) {return array_in( : , 1:n_cols-1);}    
    else {return [array_in( : , 1:col_n-1 ), array_in( : , col_n+1:n_cols)];}
}

function contains(array_in, value) {
    # checks if a matrix or cell contains a value.
     # Returns 1 or 0. Works for both numbers and other object types.
    for (element=array_in) {
        if ((getdtype(value)=="number") and (getdtype(element)=="number")) {
            #?"both elements are numbers"; # debug
            if (almostequal(value,element)) {
                #?num2str(value) + " almost equal " + num2str(element); # debug            
                return 1;
            }
        }
        else {
            if (getdtype(value)==getdtype(element)) {
                #?value; # debug
                #?element; # debug
                if (value==element) {
                    #?"equal"; # debug
                    return 1;
                }   
            }
        }
    }
    return 0;
}


?"General function lib has been imported";